#include <iostream>
#include <vector>
#include <algorithm>
#include <random>
#include <ctime>
#include <string>

// ANSI 颜色码
const std::string RED   = "\033[31m";
const std::string RESET = "\033[0m";

enum class Suit { Hearts, Diamonds, Clubs, Spades };
enum class Rank { Two = 2, Three, Four, Five, Six, Seven, Eight, Nine, Ten, Jack, Queen, King, Ace };

class Card {
public:
    Card(Suit suit, Rank rank) : suit(suit), rank(rank) {}

    std::string getTopLine() const {
        return "+-------";
    }

    std::string getRankLine() const {
        return "| " + rankColor() + rankToString() + RESET + "     ";
    }

    std::string getSuitLine() const {
        return "|  " + suitColor() + suitToString() + RESET + "    ";
    }

    std::string getBottomLine() const {
        return "+-------";
    }

    void display() const {
        std::cout << getTopLine() << " ";
    }

    void displayRank() const {
        std::cout << getRankLine() << " ";
    }

    void displaySuit() const {
        std::cout << getSuitLine() << " ";
    }

    void displayBottom() const {
        std::cout << getBottomLine() << " ";
    }

private:
    Suit suit;
    Rank rank;

    static std::string getSuitColor(Suit suit) {
        switch (suit) {
            case Suit::Hearts:
            case Suit::Diamonds:
                return RED;
            case Suit::Clubs:
            case Suit::Spades:
                return RESET;
        }
        return RESET;
    }

    std::string suitColor() const {
        return getSuitColor(suit);
    }

    std::string rankColor() const {
        // 使用默认颜色显示点数
        return RESET;
    }

    std::string suitToString() const {
        switch (suit) {
            case Suit::Hearts:   return "❤";
            case Suit::Diamonds: return "♦";
            case Suit::Clubs:    return "♣";
            case Suit::Spades:   return "♠";
        }
        return "";
    }

    std::string rankToString() const {
        switch (rank) {
            case Rank::Two:   return "2";
            case Rank::Three: return "3";
            case Rank::Four:  return "4";
            case Rank::Five:  return "5";
            case Rank::Six:   return "6";
            case Rank::Seven: return "7";
            case Rank::Eight: return "8";
            case Rank::Nine:  return "9";
            case Rank::Ten:   return "10";
            case Rank::Jack:  return "J";
            case Rank::Queen: return "Q";
            case Rank::King:  return "K";
            case Rank::Ace:   return "A";
        }
        return "";
    }
};

class Deck {
public:
    Deck() {
        for (int s = 0; s < 4; ++s) {
            for (int r = 2; r <= 14; ++r) {
                cards.emplace_back(static_cast<Suit>(s), static_cast<Rank>(r));
            }
        }
        std::srand(static_cast<unsigned>(std::time(nullptr)));
        rng.seed(std::random_device{}());
    }

    void displayThreeRandomCards() {
        std::vector<int> indices(cards.size());
        for (int i = 0; i < indices.size(); ++i) indices[i] = i;

        std::shuffle(indices.begin(), indices.end(), rng);

        for (int i = 0; i < 3; ++i) {
            cards[indices[i]].display();
        }
        std::cout << std::endl;

        for (int i = 0; i < 3; ++i) {
            cards[indices[i]].displayRank();
        }
        std::cout << std::endl;

        for (int i = 0; i < 3; ++i) {
            cards[indices[i]].displaySuit();
        }
        std::cout << std::endl;

        for (int i = 0; i < 3; ++i) {
            cards[indices[i]].displayBottom();
        }
        std::cout << std::endl;
    }

private:
    std::vector<Card> cards;
    std::mt19937 rng; // 随机数生成器
};

int main() {
    Deck deck;
    deck.displayThreeRandomCards();
    return 0;
}

